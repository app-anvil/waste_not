@startuml Domain Diagram
skinparam defaultFontName monospace

title Classes - Class Diagram

interface ProductEntity {
  {abstract} +String get id()
  {abstract} +String? get barcode()
  {abstract} +String? get name()
  {abstract} +String? get brand()
  {abstract} +String? get imageFrontUrl()
  {abstract} +String? get imageFrontSmallUrl()
  {abstract} +Duration? get expectedShelfLife()
  {abstract} +StorageType? get suggestedStorageType()
  {abstract} +Measure? get measure()
}
ProductModel o-- Measure: measure
ProductEntity --> StorageType: suggestedStorageType

class ProductModel {
  +String id
  +String? barcode
  +String? name
  +String? brand
  +String? imageFrontUrl
  +String? imageFrontSmallUrl
  +Duration? expectedShelfLife
  +StorageType? suggestedStorageType
  +Measure? measure
}

class User {
  +String id
  +String email
  +String displayName
  +String familyId
}

class Family {
  +String id
  +String name
  +String? description
}
Family "1" *-- "1..n" User: id
Family *-- Storage: id

class Storage {
  +String id
  +String name
  +String? description
  +StorageType storageType
}

StorageType <-- Storage: storageType

enum StorageType {
  FRIDGE
  FREEZER
  PANTRY
}

interface ItemEntity {
  {abstract} +String get id()
  {abstract} +String get productId()
  {abstract} +Date get expirationDate()
  {abstract} +DateTime get createdAt()
  {abstract} +String get storageId()
  {abstract} +Measure get remainingMeasure()
  ---
  {abstract} +ItemEntity copyWith()
}

interface ShelfItemEntity {
  +int? get shelf()
}

abstract class FridgeItemEntity {
  +int? shelf
  +String id
  +String productId
  +Date expirationDate
  +DateTime createdAt
  +String storageId
  +Measure remainingMeasure
  
  {abstract} +FridgeItemEntity copyWith()
}

note right of FridgeItemEntity
  checks in the constructor
  that the storage is 
  of type ""FRIDGE""
end note

ItemEntity <|-- ShelfItemEntity

ShelfItemEntity <|-- FridgeItemEntity

abstract class FreezerItemEntity {
  +int? shelf
  +String id
  +String productId
  +Date expirationDate
  +DateTime createdAt
  +String storageId
  +Measure remainingMeasure

  {abstract} +FreezerItemEntity copyWith()
}
note right of FreezerItemEntity
  checks in the constructor
  that the storage is 
  of type ""FREEZER""
end note

ShelfItemEntity <|-- FreezerItemEntity

Storage *-- ItemEntity: storageId
PantryItemModel o-- Measure: remainingMeasure

class PantryItemModel {
  +String id
  +String productId
  +Date expirationDate
  +DateTime createdAt
  +String storageId
  +Measure remainingMeasure

  +ItemEntity copyWith()
}

class FridgeItemModel {
  ...
}

FridgeItemEntity <|-- FridgeItemModel

class FreezerItemModel {
  ...
}

FreezerItemEntity <|-- FreezerItemModel

class Measure {
  +double quantity
  +UnitOfMeasure unitOfMeasure
}
Measure *-- UnitOfMeasure: unitOfMeasure
enum UnitOfMeasure {
  KILOGRAM
  LITER
  UNIT
}

ProductEntity <|-- ProductModel
ProductEntity <.. ItemEntity: references
ItemEntity <|-- PantryItemModel

@enduml
