@startuml Domain Diagram
skinparam defaultFontName monospace

title Classes - Class Diagram

interface ProductEntity {
  {abstract} +String get id()
  {abstract} +String? get barcode()
  {abstract} +String? get name()
  {abstract} +String? get brand()
  {abstract} +String? get imageFrontUrl()
  {abstract} +String? get imageFrontSmallUrl()
  {abstract} +Duration? get expectedShelfLife()
  {abstract} +StorageType? get suggestedStorageType()
  {abstract} +Measure? get measure()
}
ProductModel o-- Measure: measure
ProductEntity --> StorageType: suggestedStorageType

class ProductModel {
  +String id
  +String? barcode
  +String? name
  +String? brand
  +String? imageFrontUrl
  +String? imageFrontSmallUrl
  +Duration? expectedShelfLife
  +StorageType? suggestedStorageType
  +Measure? measure
}

class User {
  +String id
  +String email
  +String displayName
  +String familyId
}

class Family {
  +String id
  +String name
  +String? description
}
Family "1" *-- "1..n" User: id
Family *-- Storage: id

class Storage {
  +String id
  +String name
  +String? description
  +StorageType storageType
}

StorageType <-- Storage: storageType

enum StorageType {
  FRIDGE
  FREEZER
  PANTRY
}

enum ItemStatus {
  NORMAL
  EXPIRED
  OPENED
  TOBEEATEN
}

enum ItemCategory {
  MEAT
  FISH
  EGG
  FRUIT
  VEGETABLE
  LEGUMES
  DAIRY
  CEREALS
}

interface ItemEntity {
  {abstract} +String get id()
  {abstract} +String get productId()
  {abstract} +Date get initialExpirationDate()
  {abstract} +DateTime get createdAt()
  {abstract} +String get storageId()
  {abstract} +Measure get remainingMeasure()
  {abstract} +DateTime? get openedAt()
  {abstract} +ItemCategory? get category()
  {abstract} +int? get goodForDaysAfterOpening()
  ---
  {abstract} +ItemEntity copyWith()
  +ItemStatus get status()
  +Date get actualExpirationDate()
}

ItemEntity --> ItemStatus: status
ItemEntity --> ItemCategory: category

interface ShelfItemEntity {
  +int? get shelf()
}

' abstract class FridgeItemEntity {
'   +int? shelf
'   +String id
'   +String productId
'   +Date initialExpirationDate
'   +DateTime createdAt
'   +String storageId
'   +Measure remainingMeasure
  
'   {abstract} +FridgeItemEntity copyWith()
' }

' note right of FridgeItemEntity
'   checks in the constructor
'   that the storage is 
'   of type ""FRIDGE""
' end note

ItemEntity <|.. ShelfItemEntity

' ShelfItemEntity <|-- FridgeItemEntity

' abstract class FreezerItemEntity {
'   +int? shelf
'   +String id
'   +String productId
'   +Date initialExpirationDate
'   +DateTime createdAt
'   +String storageId
'   +Measure remainingMeasure

'   {abstract} +FreezerItemEntity copyWith()
' }
' note right of FreezerItemEntity
'   checks in the constructor
'   that the storage is 
'   of type ""FREEZER""
' end note

' ShelfItemEntity <|-- FreezerItemEntity


abstract class ItemModel {
  +String id
  +String productId
  +Date initialExpirationDate
  +DateTime createdAt
  +String storageId
  +Measure remainingMeasure
  +DateTime? openedAt
  +ItemCategory? category
  +int? goodForDaysAfterOpening

  +ItemEntity copyWith()
  +ItemStatus get status()
  +Date get actualExpirationDate()
}

ItemModel o-- Measure: remainingMeasure

ItemEntity <|-- ItemModel


Storage *-- ItemEntity: storageId

class PantryItemModel {
  +String id
  +String productId
  +Date initialExpirationDate
  +DateTime createdAt
  +String storageId
  +Measure remainingMeasure
  +DateTime? openedAt
  +ItemCategory? category
  +int? goodForDaysAfterOpening

  +ItemEntity copyWith()
}

class ShelfItemModel {
  +String id
  +int? shelf
  +String productId
  +Date initialExpirationDate
  +DateTime createdAt
  +String storageId
  +Measure remainingMeasure
  +DateTime? openedAt
  +ItemCategory? category
  +int? goodForDaysAfterOpening

  +ItemEntity copyWith()
}

' class FridgeItemModel {
'   ...
' }

' FridgeItemEntity <|-- FridgeItemModel

' class FreezerItemModel {
'   ...
' }

' FreezerItemEntity <|-- FreezerItemModel

class Measure {
  +double? quantity
  +UnitOfMeasure? unitOfMeasure
  +int units
}
Measure *-- UnitOfMeasure: unitOfMeasure
enum UnitOfMeasure {
  KILOGRAM
  LITER
}

ProductEntity <|-- ProductModel
ProductEntity <.. ItemEntity: references
ItemModel <|-- PantryItemModel

ItemModel <|-- ShelfItemModel
ShelfItemEntity <|.. ShelfItemModel

@enduml
