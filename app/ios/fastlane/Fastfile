# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# default_platform(:ios)

# platform :ios do
#   desc "Push a new dev build to TestFlight"
#   lane :dev do
#     build_app(workspace: "Runner.xcworkspace", scheme: "development", xcargs: "-allowProvisioningUpdates")
#     upload_to_testflight(skip_waiting_for_build_processing: true)
#   end

#   desc "Push a new stg build to TestFlight"
#   lane :stg do
#     build_app(workspace: "Runner.xcworkspace", scheme: "staging", xcargs: "-allowProvisioningUpdates")
#     upload_to_testflight(skip_waiting_for_build_processing: true)
#   end

#   desc "Push a new prod build to TestFlight"
#   lane :prod do
#     build_app(workspace: "Runner.xcworkspace", scheme: "production", xcargs: "-allowProvisioningUpdates")
#     upload_to_testflight(skip_waiting_for_build_processing: true)
#   end
# end

######## IOS CONFIGURATIONS
# If you want to make the build automatically available to external groups,
# add the name of the group to the array below, after "App Store Connect Users"
# groups = ["External Tests group name"]
workspace = "Runner.xcworkspace"
project = "Runner.xcodeproj"
# slack_weebhook_url = ENV["SLACK_WEBHOOK_URL"]

# If you build for multiple environments, you might wanna set this specifically on build_app
configuration = "Release"
export_method = "app-store" # specify the export method
key_id = ENV["APPSTORE_KEY_ID"] # The key id of the p8 file
issuer_id = ENV["APPSTORE_ISSUER_ID"] # issuer id on appstore connect
key_filepath = ENV["P8_FILE_PATH"] # The path to p8 file generated on appstore connect
######## END IOS CONFIGURATIONS

default_platform(:ios)

platform :ios do
  desc "Push a new dev build to TestFlight"

  lane :dev do
    setup_ci
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_filepath: key_filepath,
      in_house: false
    )

    # latest_build_number = latest_testflight_build_number(
    #     api_key: api_key,
    #     app_identifier: app_identifier
    # )
    # increment_build_number(
    #     build_number: (latest_build_number + 1),
    # )


    clear_derived_data
    match(api_key: api_key)
    
    gym(
      scheme: "development",
      configuration: configuration,
      export_options: {
        method: export_method,
        compile_bitcode: true
      }
    )

    pilot(
      # changelog: "Build #{latest_build_number + 1}",
      api_key: api_key,
      app_identifier: app_identifier,
      # distribute_external: false,
      # groups: groups,
      skip_waiting_for_build_processing: true,
    )

    # slack(
    #   slack_url: slack_weebhook_url,
    #   message: "Build #{latest_build_number + 1} is available on TestFlight",
    #   channel: "#your-channel",
    #   default_payloads: [],
    #   success: true,
    #   payload: {
    #     'Build Date' => Time.now,
    #     'Build Number' => latest_build_number + 1
    #   }
    # )

    clean_build_artifacts
  end

  desc "Push a new stg build to TestFlight"

  lane :stg do
    setup_ci
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_filepath: key_filepath,
      in_house: false
    )

    clear_derived_data
    match(api_key: api_key)
    
    gym(
      scheme: "staging",
      configuration: configuration,
      export_options: {
        method: export_method,
        compile_bitcode: true
      }
    )

    pilot(
      api_key: api_key,
      app_identifier: app_identifier,
      skip_waiting_for_build_processing: true,
    )

    clean_build_artifacts
  end

  desc "Push a new prod build to TestFlight"

  lane :prod do
    setup_ci
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_filepath: key_filepath,
      in_house: false
    )

    clear_derived_data
    match(api_key: api_key)
    
    gym(
      scheme: "production",
      configuration: configuration,
      export_options: {
        method: export_method,
        compile_bitcode: true
      }
    )

    pilot(
      api_key: api_key,
      app_identifier: app_identifier,
      skip_waiting_for_build_processing: true,
    )

    clean_build_artifacts
  end
end